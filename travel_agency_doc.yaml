openapi: 3.0.3

info:
  title: Travel Agency
  description: Travel around Europe without worrying about the details
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1

paths:
  /city:
    get:
      tags:
        - City
      summary: Print list of all available cities
      description: Print list of all available cities
      operationId: getCities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
    post:
      tags:
        - City
      summary: Add an existing city
      operationId: addCity
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CityRequest'
  '/city/{country}':
    get:
      tags:
        - City
      summary: Find cities in country
      description: Returns an array of cities
      operationId: getCitiesByCountry
      parameters:
        - name: country
          in: path
          description: Cities of country to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '400':
          description: Invalid country name supplied
        '404':
          description: Country not found
        '405':
          description: Validation exception
  '/city/{idcity}':
    get:
      tags:
        - City
      summary: Find city by ID
      description: Returns a single city
      operationId: getCityById
      parameters:
        - name: idcity
          in: path
          description: ID of city to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
    put:
      tags:
        - City
      summary: Update city
      operationId: updateCity
      parameters:
        - name: idcity
          in: path
          description: ID of city that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid city supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityReq'
    delete:
      tags:
        - City
      summary: Delete city
      description: This can only be done by the logged in user.
      operationId: deleteCity
      parameters:
        - name: idcity
          in: path
          description: The city that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  /user:
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/UserRequest'
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
  '/user/{username}':
    get:
      tags:
        - User
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
        description: Updated user object
        required: true
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
  /trip:
    post:
      tags:
        - Trip
      summary: Add an existing Trip
      operationId: addTrip
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TripRequest'
  '/trip/{idtrip}':
    get:
      tags:
        - Trip
      summary: Find trip by ID
      description: Returns a single trip
      operationId: getTripById
      parameters:
        - name: idtrip
          in: path
          description: ID of trip to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    put:
      tags:
        - Trip
      summary: Update trip
      operationId: updateTrip
      parameters:
        - name: idtrip
          in: path
          description: ID of trip that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripReq'
    delete:
      tags:
        - Trip
      summary: Delete trip
      description: This can only be done by the logged in user.
      operationId: deleteTrip
      parameters:
        - name: idtrip
          in: path
          description: The trip that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  /place:
    get:
      tags:
        - Place
      summary: Print list of all available places
      description: Print list of all available places
      operationId: getPlaces
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
    post:
      tags:
        - Place
      summary: Add an existing Place
      operationId: addPlace
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Place not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PlaceRequest'
  '/place/{city_id}':
    get:
      tags:
        - Place
      summary: Find places in a city
      description: Returns an array of places
      operationId: getPlacesByCity
      parameters:
        - name: city_id
          in: path
          description: Places of city to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
        '400':
          description: Invalid Place name supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
  '/place/{idplace}':
    get:
      tags:
        - Place
      summary: Find Place by ID
      description: Returns a Place
      operationId: getPlaceById
      parameters:
        - name: idplace
          in: path
          description: ID of Place to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '400':
          description: Invalid ID supplied
        '404':
          description: Place not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    put:
      tags:
        - Place
      summary: Update Place
      operationId: updatePlace
      parameters:
        - name: idplace
          in: path
          description: ID of Place that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Place not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceReq'
    delete:
      tags:
        - Place
      summary: Delete Place
      description: This can only be done by the logged in user.
      operationId: deletePlace
      parameters:
        - name: idplace
          in: path
          description: The trip that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Place not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  /transport:
    post:
      tags:
        - Transport
      summary: Add an existing Transport
      operationId: addTransport
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/TransportRequest'
  '/transport/{idtransport}':
    put:
      tags:
        - Transport
      summary: Update transport
      operationId: updateTransport
      parameters:
        - name: idtransport
          in: path
          description: ID of transport that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportReq'
    delete:
      tags:
        - Transport
      summary: Delete transport
      description: This can only be done by the logged in user.
      operationId: deleteTransport
      parameters:
        - name: idtransport
          in: path
          description: The transport that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    get:
      tags:
        - Transport
      summary: Find transport by id
      description: Returns transport
      operationId: getTransportByName
      parameters:
        - name: idtransport
          in: path
          description: Transport to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transport'
        '400':
          description: Invalid transport name supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
  /hotel:
    post:
      tags:
        - Hotel
      summary: Add an existing Hotel
      operationId: addHotel
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid transport name supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/HotelRequest'
  '/hotel/{idhotel}':
    get:
      tags:
        - Hotel
      summary: Find hotel by ID
      description: Returns a hotel
      operationId: getHotelById
      parameters:
        - name: idhotel
          in: path
          description: ID of hotel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
    put:
      tags:
        - Hotel
      summary: Update hotel
      operationId: updateHotel
      parameters:
        - name: idhotel
          in: path
          description: ID of hotel that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelReq'
    delete:
      tags:
        - Hotel
      summary: Delete hotel
      description: This can only be done by the logged in user.
      operationId: deleteHotel
      parameters:
        - name: idhotel
          in: path
          description: The hotel that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  /payment:
    post:
      tags:
        - Payment
      summary: Add an existing Payment
      operationId: addPayment
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid transport name supplied
        '404':
          description: Payment not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/PaymentRequest'
  '/payment/{idpayment}':
    get:
      tags:
        - Payment
      summary: Find Payment by ID
      description: Returns a Payment
      operationId: getPaymentById
      parameters:
        - name: idpayment
          in: path
          description: ID of Payment to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
        '405':
          description: Validation exception
    put:
      tags:
        - Payment
      summary: Update Payment
      operationId: updatePayment
      parameters:
        - name: idpayment
          in: path
          description: ID of Payment that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelReq'
    delete:
      tags:
        - Payment
      summary: Delete Payment
      description: This can only be done by the logged in user.
      operationId: deletePayment
      parameters:
        - name: idpayment
          in: path
          description: The Payment that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Payment not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  '/hotelschoice/{idchoice}':
    get:
      tags:
        - HotelsChoice
      summary: Find info about the hotel
      description: Returns info about the hotel
      operationId: getHotelsByIDChoice
      parameters:
        - name: idchoice
          in: path
          description: ID of hotel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HotelsChoice'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
    put:
      tags:
        - HotelsChoice
      summary: Update HotelsChoice
      operationId: updateHotelsChoice
      parameters:
        - name: idchoice
          in: path
          description: ID of HotelsChoice that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: HotelsChoice not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelsChoiceReq'
    delete:
      tags:
        - HotelsChoice
      summary: Delete HotelsChoice
      description: This can only be done by the logged in user.
      operationId: deleteHotelsChoice
      parameters:
        - name: idchoice
          in: path
          description: The HotelsChoice that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: HotelsChoice not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
  /hotelschoice:
    get:
      tags:
        - HotelsChoice
      summary: Print list of all hotels
      description: Print list of all hotels
      operationId: getAllHotelChoices
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotelsChoice'
        '400':
          description: Invalid ID supplied
        '404':
          description: HotelsChoice not found
        '405':
          description: Validation exception
    post:
      tags:
        - HotelsChoice
      summary: Add new HotelsChoice
      operationId: addHotelsChoice
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: HotelsChoice not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/HotelsChoiceRequest'
  /stop:
    get:
      tags:
        - Stop
      summary: Print list of all stops
      description: Print list of all stops
      operationId: getAllStops
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    post:
      tags:
        - Stop
      summary: Add an existing Stop
      operationId: addStop
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/StopRequest'
  '/stop/{idstop}':
    get:
      tags:
        - Stop
      summary: Find info about the stop
      description: Returns info about the stop
      operationId: getStopByID
      parameters:
        - name: idstop
          in: path
          description: ID of stop to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    put:
      tags:
        - Stop
      summary: Update Stop
      operationId: updateStop
      parameters:
        - name: idstop
          in: path
          description: ID of Stop that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopReq'

    delete:
      tags:
        - Stop
      summary: Delete Stop
      description: This can only be done by the logged in user.
      operationId: deleteStop
      parameters:
        - name: idstop
          in: path
          description: The Stop that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

  /booking:
    get:
      tags:
        - Booking
      summary: Print list of all bookings
      description: Print list of all bookings
      operationId: getAllBookings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    post:
      tags:
        - Booking
      summary: Add an existing Booking
      operationId: addBooking
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/BookingRequest'
  '/booking/{idbooking}':
    get:
      tags:
        - Booking
      summary: Find info about the booking
      description: Returns info about the booking
      operationId: getBookingByID
      parameters:
        - name: idbooking
          in: path
          description: ID of booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
    put:
      tags:
        - Booking
      summary: Update Booking
      operationId: updateBooking
      parameters:
        - name: idbooking
          in: path
          description: ID of Booking that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingReq'
    delete:
      tags:
        - Booking
      summary: Delete Booking
      description: This can only be done by the logged in user.
      operationId: deleteBooking
      parameters:
        - name: idbooking
          in: path
          description: The Booking that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      security:
        - basicAuth: []

components:
  schemas:
    City:
      type: object
      properties:
        idcity:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: London
        country:
          type: string
          example: England
      xml:
        name: City
    CityReq:
      type: object
      properties:
        name:
          type: string
          example: London
        country:
          type: string
          example: England
      xml:
        name: City
    User:
      type: object
      properties:
        iduser:
          type: integer
          format: int64
          example: 23
        name:
          type: string
          example: Jack
        surname:
          type: string
          example: Brown
        pasport:
          type: string
          example: PG902809
        username:
          type: string
          example: Jack
        password:
          type: string
          example: jdskh89
    UserReq:
      type: object
      properties:
        name:
          type: string
          example: Jack
        surname:
          type: string
          example: Brown
        pasport:
          type: string
          example: PG902809
        username:
          type: string
          example: Jack
        password:
          type: string
          example: PG902809
    Trip:
      type: object
      properties:
        idtrip:
          type: integer
          format: int64
          example: 42
        days:
          type: integer
          format: int64
          example: 7
        start_date:
          type: string
          format: date
          example: 2022-09-07
        transport_id:
          type: integer
          format: int64
          example: 12
    TripReq:
      type: object
      properties:
        days:
          type: integer
          format: int64
          example: 7
        start_date:
          type: string
          format: date
          example: 2022-09-07
        transport_id:
          type: integer
          format: int64
          example: 12

    Place:
      type: object
      properties:
        idplace:
          type: integer
          format: int64
          example: 42
        name:
          type: string
          example: Key Gardens
        price:
          type: number
          format: float
          example: 25.5
        rating:
          type: number
          format: float
          example: 4.5
        city_id:
          type: integer
          format: int64
          example: 12
    PlaceReq:
      type: object
      properties:
        name:
          type: string
          example: Key Gardens
        price:
          type: number
          format: float
          example: 25.5
        rating:
          type: number
          format: float
          example: 4.5
        city_id:
          type: integer
          format: int64
          example: 12

    Transport:
      type: object
      properties:
        idtransport:
          type: integer
          format: int64
          example: 49
        name:
          type: string
          example: plane
    TransportReq:
      type: object
      properties:
        name:
          type: string
          example: plane
    Hotel:
      type: object
      properties:
        idhotel:
          type: integer
          format: int64
          example: 89
        name:
          type: string
          example: Hilton
        price:
          type: integer
          format: int64
          example: 130
    HotelReq:
      type: object
      properties:
        name:
          type: string
          example: Hilton
        price:
          type: integer
          format: int64
          example: 130
    HotelsChoice:
      type: object
      properties:
        idchoice:
          type: integer
          format: int64
          example: 49
        hotel_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    HotelsChoiceReq:
      type: object
      properties:
        hotel_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    Stop:
      type: object
      properties:
        idstop:
          type: integer
          format: int64
          example: 32
        trip_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    StopReq:
      type: object
      properties:
        trip_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    Payment:
      type: object
      properties:
        idpayment:
          type: integer
          format: int64
          example: 32
        name:
          type: string
          example: cash
    PaymentReq:
      type: object
      properties:
        name:
          type: string
          example: cash
    Booking:
      type: object
      properties:
        idbooking:
          type: integer
          format: int64
          example: 32
        trip_id:
          type: integer
          format: int64
          example: 21
        user_id:
          type: integer
          format: int64
          example: 67
        payment_id:
          type: integer
          format: int64
          example: 12
    BookingReq:
      type: object
      properties:
        trip_id:
          type: integer
          format: int64
          example: 21
        user_id:
          type: integer
          format: int64
          example: 67
        payment_id:
          type: integer
          format: int64
          example: 12
  requestBodies:
    CityRequest:
      description: "Request for a City"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/CityReq'

    PaymentRequest:
      description: "Request for a Payment"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/PaymentReq'

    PlaceRequest:
      description: "Request for a Place"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/PlaceReq'

    UserRequest:
      description: "Request for a User"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/UserReq'
    TripRequest:
      description: "Request for a Trip"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/TripReq'
    TransportRequest:
      description: "Request for a Transport"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/TransportReq'
    HotelRequest:
      description: "Request for a Hotel"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/HotelReq'
    HotelsChoiceRequest:
      description: "Request for a HotelsChoice"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/HotelsChoiceReq'
    StopRequest:
      description: "Request for a Stop"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/StopReq'
    BookingRequest:
      description: "Request for a Booking"
      required: true
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/BookingReq'
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

security:
  - basicAuth: []
openapi: 3.0.3

info:
  title: Travel Agency
  description: Travel around Europe without worrying about the details.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1

paths:
  /city:
    get:
      tags:
        - City
      summary: Print list of all available cities
      description: Print list of all available cities
      operationId: getCities
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '400':
          description: Invalid status value
        '405':
          description: Validation exception
    post:
      tags:
        - City
      summary: Add an existing city
      operationId: addCity
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
      security:
        - system_auth:
            - 'write:city'
      requestBody:
        $ref: '#/components/requestBodies/CityRequest'
  '/city/{idcity}':
    get:
      tags:
        - City
      summary: Find city by ID
      description: Returns a single city
      operationId: getCityById
      parameters:
        - name: idcity
          in: path
          description: ID of city to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'          
            application/xml:
              schema:
                $ref: '#/components/schemas/City'
        '400':
          description: Invalid ID supplied
        '404':
          description: City not found
        '405':
          description: Validation exception
    put:
      tags:
        - City
      summary: Update city
      operationId: updateCity
      parameters:
        - name: idcity
          in: path
          description: ID of city that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid city supplied
        '404':
          description: City not found
      security:
        - system_auth:
            - 'write:city'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/City'
    delete:
      tags:
        - City
      summary: Delete city
      description: This can only be done by the logged in user.
      operationId: deleteCity
      parameters:
        - name: idcity
          in: path
          description: The city that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid city supplied
        '404':
          description: City not found
      security:
        - system_auth:
            - 'write:city'
  '/city/{country}':
    get:
      tags:
        - City
      summary: Find cities in country
      description: Returns an array of cities
      operationId: getCitiesByCountry
      parameters:
        - name: country
          in: path
          description: Cities of country to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
        '400':
          description: Invalid country name supplied
        '404':
          description: Country not found
        '405':
          description: Validation exception
  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - system_auth:
            - 'write:user'
            - 'read:user'
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - system_auth:
            - 'read:user'
      
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      security:
        - system_auth:
            - 'write:user'
            - 'read:user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - system_auth:
            - 'write:user'
            - 'read:user'
  /trip:
    post:
      tags:
        - Trip
      summary: Add an existing Trip
      operationId: addTrip
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/TripRequest'
  '/trip/{idtrip}':
    get:
      tags:
        - Trip
      summary: Find trip by ID
      description: Returns a single trip
      operationId: getTripById
      parameters:
        - name: idtrip
          in: path
          description: ID of trip to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Trip'
        '400':
          description: Invalid ID supplied
        '404':
          description: Trip not found
        '405':
          description: Validation exception
          
    put:
      tags:
        - Trip
      summary: Update trip
      operationId: updateTrip
      parameters:
        - name: idtrip
          in: path
          description: ID of trip that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid trip supplied
        '404':
          description: Trip not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
    delete:
      tags:
        - Trip
      summary: Delete trip
      description: This can only be done by the logged in user.
      operationId: deleteTrip
      parameters:
        - name: idtrip
          in: path
          description: The trip that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid trip supplied
        '404':
          description: Trip not found
     
  /transport:
    post:
      tags:
        - Transport
      summary: Add an existing Transport
      operationId: addTransport
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      security:
        - system_auth:
            - 'write:transport'
      requestBody:
        $ref: '#/components/requestBodies/TransportRequest'
  '/transport/{idtransport}':
    get:
      tags:
        - Transport
      summary: Find transport by ID
      description: Returns a single transport
      operationId: getTransportById
      parameters:
        - name: idtransport
          in: path
          description: ID of transport to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transport'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Transport'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception 
    put:
      tags:
        - Transport
      summary: Update transport
      operationId: updateTransport
      parameters:
        - name: idtransport
          in: path
          description: ID of transport that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid transport supplied
        '404':
          description: Transport not found
      security:
        - system_auth:
            - 'write:transport'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transport'
    delete:
      tags:
        - Transport
      summary: Delete transport
      description: This can only be done by the logged in user.
      operationId: deleteTransport
      parameters:
        - name: idtransport
          in: path
          description: The transport that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid transport supplied
        '404':
          description: Transport not found
      security:
        - system_auth:
            - 'write:transport'
  '/transport/{name}':
    get:
      tags:
        - Transport
      summary: Find transport by name
      description: Returns transport
      operationId: getTransportByName
      parameters:
        - name: name
          in: path
          description: Transport to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transport'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Transport'
        '400':
          description: Invalid transport name supplied
        '404':
          description: Transport not found
        '405':
          description: Validation exception
      
  /hotel:
    post:
      tags:
        - Hotel
      summary: Add an existing Hotel
      operationId: addHotel
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
      security:
        - system_auth:
            - 'write:hotel'
      requestBody:
        $ref: '#/components/requestBodies/HotelRequest'
  '/hotel/{idhotel}':
    get:
      tags:
        - Hotel
      summary: Find hotel by ID
      description: Returns a hotel
      operationId: getHotelById
      parameters:
        - name: idhotel
          in: path
          description: ID of hotel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception   
    put:
      tags:
        - Hotel
      summary: Update hotel
      operationId: updateHotel
      parameters:
        - name: idhotel
          in: path
          description: ID of hotel that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid hotel supplied
        '404':
          description: Hotel not found
      security:
        - system_auth:
            - 'write:hotel'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
    delete:
      tags:
        - Hotel
      summary: Delete hotel
      description: This can only be done by the logged in user.
      operationId: deleteHotel
      parameters:
        - name: idhotel
          in: path
          description: The hotel that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid hotel supplied
        '404':
          description: Hotel not found
      security:
        - system_auth:
            - 'write:hotel'
  '/hotel/{name}':
    get:
      tags:
        - Hotel
      summary: Find hotel by name
      description: Returns a hotel
      operationId: getHotelByName
      parameters:
        - name: name
          in: path
          description: Hotel to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
        '400':
          description: Invalid transport name supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
  '/hotelschoice/{idchoice}':
    get:
      tags:
        - HotelsChoice
      summary: Find info about the hotel
      description: Returns info about the hotel
      operationId: getHotelsByIDChoice
      parameters:
        - name: idchoice
          in: path
          description: ID of hotel to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HotelsChoice'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception
    put:
      tags:
        - HotelsChoice
      summary: Update HotelsChoice
      operationId: updateHotelsChoice
      parameters:
        - name: idchoice
          in: path
          description: ID of HotelsChoice that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid HotelsChoice supplied
        '404':
          description: HotelsChoice not found
      security:
        - system_auth:
            - 'write:hotelsChoice'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotelsChoice'
    delete:
      tags:
        - HotelsChoice
      summary: Delete HotelsChoice
      description: This can only be done by the logged in user.
      operationId: deleteHotelsChoice
      parameters:
        - name: idchoice
          in: path
          description: The HotelsChoice that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid HotelsChoice supplied
        '404':
          description: HotelsChoice not found
      security:
        - system_auth:
            - 'write:hotelsChoice'
  /hotelschoice:
    get:
      tags:
        - HotelsChoice
      summary: Print list of all hotels
      description: Print list of all hotels
      operationId: getAllHotelChoices
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotelsChoice'
        '400':
          description: Invalid status value
        '405':
          description: Validation exception
    post:
      tags:
        - HotelsChoice
      summary: Add an existing HotelsChoice
      operationId: addHotelsChoice
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: HotelsChoice not found
        '405':
          description: Validation exception
      security:
        - system_auth:
            - 'write:hotelsChoice'
      requestBody:
        $ref: '#/components/requestBodies/HotelsChoiceRequest'
  /stop:
    get:
      tags:
        - Stop
      summary: Print list of all stops
      description: Print list of all stops
      operationId: getAllStops
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'
        '400':
          description: Invalid status value
        '405':
          description: Validation exception
    post:
      tags:
        - Stop
      summary: Add an existing Stop
      operationId: addStop
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Stop not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/StopRequest'
  '/stop/{idstop}':
    get:
      tags:
        - Stop
      summary: Find info about the stop
      description: Returns info about the stop
      operationId: getStopByID
      parameters:
        - name: idstop
          in: path
          description: ID of stop to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception   
    put:
      tags:
        - Stop
      summary: Update Stop
      operationId: updateStop
      parameters:
        - name: idstop
          in: path
          description: ID of Stop that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Stop supplied
        '404':
          description: Stop not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
    delete:
      tags:
        - Stop
      summary: Delete Stop
      description: This can only be done by the logged in user.
      operationId: deleteStop
      parameters:
        - name: idstop
          in: path
          description: The Stop that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Stop supplied
        '404':
          description: Stop not found

  /booking:
    get:
      tags:
        - Booking
      summary: Print list of all bookings
      description: Print list of all bookings
      operationId: getAllBookings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid status value
        '405':
          description: Validation exception
    post:
      tags:
        - Booking
      summary: Add an existing Booking
      operationId: addBooking
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Booking not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/BookingRequest'
  '/booking/{idbooking}':
    get:
      tags:
        - Booking
      summary: Find info about the booking
      description: Returns info about the booking
      operationId: getBookingByID
      parameters:
        - name: idbooking
          in: path
          description: ID of booking to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid ID supplied
        '404':
          description: Hotel not found
        '405':
          description: Validation exception   
    put:
      tags:
        - Booking
      summary: Update Booking
      operationId: updateBooking
      parameters:
        - name: idbooking
          in: path
          description: ID of Booking that need to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Booking supplied
        '404':
          description: Booking not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
    delete:
      tags:
        - Booking
      summary: Delete Booking
      description: This can only be done by the logged in user.
      operationId: deleteBooking
      parameters:
        - name: idbooking
          in: path
          description: The Booking that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Booking supplied
        '404':
          description: Booking not found

components:
  schemas:
    City:
      type: object
      properties:
        idcity:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: London
        country:
          type: string
          example: England
      xml:
        name: City
    User:
      type: object
      properties:
        iduser:
          type: integer
          format: int64
          example: 23
        name:
          type: string
          example: Jack
        surname:
          type: string
          example: Brown
        passport:
          type: string
          example: PG902809
        username:
          type: string
          example: Jack  
    Trip:
      type: object
      properties:
        idtrip:
          type: integer
          format: int64
          example: 42
        days:
          type: integer
          format: int64
          example: 7
        start_date:
          type: string
          format: date
          example: 2022-09-07
        transport_id:
          type: integer
          format: int64
          example: 12
    Transport:
      type: object
      properties:
        idtransport:
          type: integer
          format: int64
          example: 49
        name:
          type: string
          example: plane
    Hotel:
      type: object
      properties:
        idhotel:
          type: integer
          format: int64
          example: 89
        name:
          type: string
          example: Hilton
        price:
          type: integer
          format: int64
          example: 130
    HotelsChoice:
      type: object
      properties:
        idchoice:
          type: integer
          format: int64
          example: 49
        hotel_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    Stop:
      type: object
      properties:
        idstop:
          type: integer
          format: int64
          example: 32
        trip_id:
          type: integer
          format: int64
          example: 21
        city_id:
          type: integer
          format: int64
          example: 67
    Payment:
      type: object
      properties:
        idpayment:
          type: integer
          format: int64
          example: 32
        name:
          type: string
          example: cash
    Booking:
      type: object
      properties:
        idbooking:
          type: integer
          format: int64
          example: 32
        trip_id:
          type: integer
          format: int64
          example: 21
        user_id:
          type: integer
          format: int64
          example: 67
        payment_id:
          type: integer
          format: int64
          example: 12
  requestBodies:
    CityRequest:
      description: "Request for a City"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/City'
    TripRequest:
      description: "Request for a Trip"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/Trip'
    TransportRequest:
      description: "Request for a Transport"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/Transport'
    HotelRequest:
      description: "Request for a Hotel"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/Hotel'
    HotelsChoiceRequest:
      description: "Request for a HotelsChoice"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/HotelsChoice'
    StopRequest:
      description: "Request for a Stop"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/Stop'
    BookingRequest:
      description: "Request for a Booking"
      required: true
      content:
        applicaton/json:
          schema: 
            $ref: '#/components/schemas/Booking'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  # name of the header, query parameter or cookie
    system_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:city: modify city
            write:user: modify user
            read:user: read user
            write:transport: modify transport
            write:hotel: modify hotel
            write:hotelsChoice: modify hotelsChoice